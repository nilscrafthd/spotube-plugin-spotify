class Converters {
  static fun paginated(data: Map, convertItems: (items: List) -> List) -> Map {
    var hasMore = data["total"] > (data["offset"] + data["items"].length)
    
    return {
      limit: data["limit"],
      nextOffset: hasMore ? data["offset"] + data["limit"] : null,
      hasMore: hasMore,
      total: data["total"],
      items: convertItems(
        data["items"].where((item)=> item != null).toList()
      ),
    }.toJson()
  }
  
  static fun fullTracks(tracks: List) -> List {
    if(tracks == null || tracks.isEmpty) {
      return []
    }
    
    var modified = []
    
    for(var track in tracks) {
      if(track == null) {
        modified.add(null)
        continue
      }
      
      var modifiedTrack = {
        id: track["id"],
        name: track["name"],
        externalUri: track["external_urls"]["spotify"] ?? "https://open.spotify.com/track/${track["id"]}",
        explicit: track["explicit"] ?? false,
        durationMs: track["duration_ms"] ?? 0,
        isrc: track["external_ids"]["isrc"] ?? "",
        artists: simpleArtists(track["artists"]),
        album: simpleAlbums([track["album"]])[0],
        
        // Additional metadata for downloads
        artistNames: track["artists"]?.map((artist) => artist["name"]).join(", ") ?? "Unknown Artist",
        albumName: track["album"]?["name"] ?? "Unknown Album",
        releaseDate: track["album"]?["release_date"] ?? "",
        trackNumber: track["track_number"] ?? 1,
        discNumber: track["disc_number"] ?? 1,
        genres: track["album"]?["genres"] ?? [],
        label: track["album"]?["label"] ?? "",
        popularity: track["popularity"] ?? 0,
        previewUrl: track["preview_url"],
      }.toJson()

      modified.add(modifiedTrack)
    }

    return modified
  }

  static fun fullAlbums(albums: List) -> List {
    if(albums == null || albums.isEmpty) {
      return
    }

    var modified = []

    for(var album in albums) {
      var modifiedAlbum = {
        id: album["id"],
        name: album["name"],
        externalUri: album["external_urls"]["spotify"] ?? "https://open.spotify.com/album/${album["id"]}",
        releaseDate: album["release_date"] ?? "",
        releaseDatePrecision: album["release_date_precision"] ?? "year",
        totalTracks: album["total_tracks"] ?? 0,
        artists: simpleArtists(album["artists"]),
        images: album["images"],
        albumType: (album["album_type"] == "ep" ? "compilation" : album["album_type"]) ?? "album",
        totalTracks: album["total_tracks"],
        recordLabel: album["label"],
        genres: album["genres"],
        
        // Additional metadata for downloads
        artistNames: album["artists"]?.map((artist) => artist["name"]).join(", ") ?? "Unknown Artist",
        popularity: album["popularity"] ?? 0,
        copyrights: album["copyrights"] ?? [],
      }.toJson()

      modified.add(modifiedAlbum)
    }
    
    return modified
  }

  static fun simpleAlbums(albums: List) -> List {
    if(albums == null || albums.isEmpty) {
      return []
    }
    
    var modified = []

    for(var album in albums) {
      var albumModified = {
        id: album["id"],
        name: album["name"],
        externalUri: album["external_urls"]["spotify"] ?? "https://open.spotify.com/album/${album["id"]}",
        releaseDate: album["release_date"],
        releaseDatePrecision: album["release_date_precision"],
        artists: simpleArtists(album["artists"]),
        images: album["images"],
        albumType: (album["album_type"] == "ep" ? "compilation" : album["album_type"]) ?? "album",
        
        // Additional metadata for downloads
        artistNames: album["artists"]?.map((artist) => artist["name"]).join(", ") ?? "Unknown Artist",
      }.toJson()

      modified.add(albumModified)
    }
    
    return modified
  }

  static fun fullArtists(artists: List) -> List {
    if(artists == null || artists.isEmpty) {
      return []
    }
    
    var modified = []

    for(var artist in artists) {
      var artistModified = {
        id: artist["id"],
        name: artist["name"],
        externalUri: artist["external_urls"]["spotify"] ?? "https://open.spotify.com/artist/${artist["id"]}",
        images: artist["images"],
        genres: artist["genres"] ?? [],
        followers: artist["followers"]?["total"],
        
        // Additional metadata for downloads
        popularity: artist["popularity"] ?? 0,
      }.toJson()

      modified.add(artistModified)
    }
    
    return modified 
  }

  static fun simpleArtists(artists: List) -> List {
    if(artists == null || artists.isEmpty) {
      return []
    }
    
    var modified = []

    for(var artist in artists) {
      var artistModified = {
        id: artist["id"],
        name: artist["name"] ?? "Unbekannter Künstler",
        externalUri: artist["external_urls"]["spotify"] ?? "https://open.spotify.com/artist/${artist["id"]}",
        images: artist["images"] ?? [],
        
        // Avatar URL für einfachen Zugriff
        avatarUrl: artist["images"]?.isNotEmpty == true ? artist["images"][0]["url"] : null,
      }.toJson()

      modified.add(artistModified)
    }

    return modified
  }

  static fun simpleUser(data: Map) -> Map {
    return {
        id: data["id"],
        name: data["display_name"],
        images: data["images"],
        externalUri: data["external_urls"]["spotify"] ?? "https://open.spotify.com/user/${data["id"]}",
      }.toJson()
  }

  static fun simplePlaylistsFromLibraryV3(playlists: List) -> List {
    if (playlists == null || playlists.isEmpty) {
      return []
    }
    var modified = []
    for (var playlist in playlists) {
      var playlistModified = {
        id: playlist["id"],
        name: playlist["name"],
        description: playlist["description"],
        images: playlist["images"],
        externalUri: playlist["external_urls"]["spotify"] ?? "https://open.spotify.com/playlist/${playlist["id"]}",
        owner: simpleUser(playlist["owner"]),
      }.toJson()

      modified.add(playlistModified)
    }

    return modified
  }

  static fun fullPlaylists(playlists: List) -> List {
    if (playlists == null || playlists.isEmpty) {
      return []
    }
    var modified = []
    for (var playlist in playlists) {
      var playlistModified = {
        id: playlist["id"],
        name: playlist["name"],
        description: playlist["description"],
        images: playlist["images"],
        externalUri: playlist["external_urls"]["spotify"] ?? "https://open.spotify.com/playlist/${playlist["id"]}",
        owner: simpleUser(playlist["owner"]),
        collaborative: playlist["collaborative"] ?? false,
        public: playlist["public"] ?? false,
      }.toJson()

      modified.add(playlistModified)
    }

    return modified
  }

  // Helper function to get download metadata from track
  static fun getDownloadMetadata(track: Map) -> Map {
    return {
      title: track["name"] ?? "Unknown Title",
      artist: track["artistNames"] ?? "Unknown Artist",
      album: track["albumName"] ?? "Unknown Album",
      year: track["releaseDate"]?.substring(0, 4) ?? "",
      trackNumber: track["trackNumber"] ?? 1,
      discNumber: track["discNumber"] ?? 1,
      genre: track["genres"]?.join(", ") ?? "",
      label: track["label"] ?? "",
      isrc: track["isrc"] ?? "",
      duration: track["durationMs"] ?? 0,
      explicit: track["explicit"] ?? false,
      albumArt: track["album"]?["images"]?.isNotEmpty == true ? track["album"]["images"][0]["url"] : null,
    }.toJson()
  }
}

export { Converters }
